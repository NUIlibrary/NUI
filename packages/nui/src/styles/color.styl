$lightenStep = 15%;
$darkenStep = 15%;

// 判断字体颜色
chioseTextColor(bgColor) {
  if (luminosity(bgColor) > 0.4) {
    color: var(--nui-color-text-dark);
  } else {
    color: var(--nui-color-text-light);
  }
}

fun(colors) {
  for $key, $value in colors {
    .bg-{$key} {
      background-color: s('var(--nui-color-' + $key + ')');
      chioseTextColor($value);
    }

    .border-{$key} {
      border: 1px solid s('var(--nui-color-' + $key + ')');
    }

    .text-{$key} {
      color: s('var(--nui-color-' + $key + ')');
    }

    for $i in 1...6 {
      .bg-{$key}-lighten{$i} {
        background-color: s('var(--nui-color-' + $key + '-lighten' + $i + ')');
        chioseTextColor(lighten($value, $i * $lightenStep));
      }

      .bg-{$key}-darken{$i} {
        background-color: s('var(--nui-color-' + $key + '-darken' + $i + ')');
        chioseTextColor(darken($value, $i * $darkenStep));
      }

      .text-{$key}-lighten{$i} {
        color: s('var(--nui-color-' + $key + '-lighten' + $i + ')');
      }

      .text-{$key}-darken{$i} {
        color: s('var(--nui-color-' + $key + '-darken' + $i + ')');
      }

      .border-{$key}-lighten{$i} {
        border: 1px solid s('var(--nui-color-' + $key + '-darken' + $i + ')');
      }

      .border-{$key}-darken{$i} {
        border: 1px solid s('var(--nui-color-' + $key + '-darken' + $i + ')');
      }
    }
  }
}

fun($NUI.colors);
fun($NUI.themes.light);