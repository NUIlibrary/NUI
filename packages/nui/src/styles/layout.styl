:root {
  for $key, $value in $NUI.break {
    --nui-break-{$key}: ($value['value']);
  }
}

.n-container {
  padding: 1rem;
}

.n-row {
  display: flex;
  flex-wrap: wrap;
  width: 100%;
  box-sizing: border-box;

  &::after {
    clear: both;
    display: table;
    content: '';
  }

  // [attribute] : justify
  // [description] : flex 布局下的水平排列方式
  // [type] : string
  // [val] : start/end/center/space-around/space-between
  $nui-row-justify-content = flex-start, flex-end, center, space-around, space-between, space-evenly;

  for $i-val in $nui-row-justify-content {
    &.justify-content-{$i-val} {
      justify-content: $i-val;
    }
  }

  // [attribute] : align
  // [description] : flex 布局下的垂直排列方式
  // [type] : string
  // [val] : flex-start/flex-end/center/baseline/stretch
  $nui-row-align-items = flex-start, flex-end, center, baseline, stretch;

  for $i-val in $nui-row-align-items {
    &.align-items-{$i-val} {
      align-items: $i-val;
    }
  }

  .n-col {
    box-sizing: border-box;

    // 复用函数
    $f-col-width($name) {
      for $i-num in 1...21 {
        &.{$name}-{$i-num} {
          width: $i-num * 5%;
        }
      }
    }

    $f-col-width('span');

    for $key, $value in $NUI.break {
      // TODO: 媒体查询中不能使用CSS变量？
      // @media only screen and ({$value['type']}: s('var(--nui-break-' + $key + ')')) {
      @media only screen and ({$value.type}: $value.value) {
        $f-col-width($key);
      }
    }
  }
}